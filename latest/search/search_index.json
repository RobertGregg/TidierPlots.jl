{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-tidierplotsjl","title":"What is TidierPlots.jl?","text":"<p>TidierPlots.jl is a 100% Julia implementation of the R package ggplot in Julia. Powered by the AlgebraOfGraphics.jl, Makie.jl, and Julia\u2019s extensive meta-programming capabilities, TidierPlots.jl is an R user\u2019s love letter to data visualization in Julia.</p> <p><code>TidierPlots.jl</code> has three goals, which differentiate it from other plotting packages in Julia:</p> <ol> <li>Stick as closely to tidyverse syntax and behaviour as possible: Whereas other  meta-packages introduce Julia-centric idioms for working with  plots, this package\u2019s goal is to reimplement ggplot  in Julia. This means that <code>TidierPlots.jl</code> uses tidy expressions as opposed  to idiomatic Julia expressions. An example of a tidy expression is  <code>a = mean(b)</code>.</li> <li>Stay as compatible as possible with AlgebraOfGraphics.jl This package is meant  to be a thin wrapper around AoG's syntax to help introduce R users to plotting in   Julia. <code>Geom</code> objects declared in TidierPlots.jl can be easily converted to AoG <code>Layer</code>  objects using <code>Layer(Geom)</code>, and <code>GGPlot</code> objects can be converted to AoG <code>Layers</code> objects using <code>Layers(GGPlot)</code>.</li> <li> <p>To Extend ggplot using julia-specific features where appropriate as long as this does  not confict with the first two goals. The package aims to behave exactly like ggplot  unless told otherwise. Additional options and parameters that are not present in ggplot   may be added, but options that are present in R's ggplot should behave the way they do in R. </p> </li> </ol> <p>To support R-style programming, TidierPlots.jl is implemented using macros.</p> <p>TidierPlots.jl currently supports the top-level macro <code>@ggplot()</code>, plus:</p> <p>Geoms:</p> <ul> <li><code>geom_point</code></li> <li><code>geom_smooth</code></li> <li><code>geom_errorbar</code></li> <li><code>geom_path</code>, <code>geom_line</code>, and <code>geom_step</code></li> <li><code>geom_bar</code>, <code>geom_col</code>, and <code>geom_histogram</code></li> <li><code>geom_boxplot</code> and <code>geom_violin</code></li> <li><code>geom_contour</code> and <code>geom_tile</code></li> <li><code>geom_text</code> and <code>geom_label</code></li> </ul> <p>Makie Themes:</p> <ul> <li><code>theme_ggplot2()</code> (the default)</li> <li><code>theme_dark()</code></li> <li><code>theme_black()</code></li> <li><code>theme_white()</code></li> <li><code>theme_minimal()</code></li> </ul> <p>Additional Elements:</p> <ul> <li><code>scale_[x|y]_[continuous|log[ |2|10]|logit|pseudolog10|sqrt|reverse]</code></li> <li><code>labs</code></li> <li><code>lims</code></li> </ul> <p></p> <p></p>"},{"location":"#what-functions-does-tidierplotsjl-support","title":"What functions does TidierPlots.jl support?","text":""},{"location":"#example","title":"Example","text":"<p>Let's make some plots using the Palmer Penguins data from <code>PalmerPenguins.jl</code>:</p> <pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\n\n@ggplot(data = penguins) + \n    @geom_bar(aes(x = species)) +\n    @labs(x = \"Species\")\n</code></pre> <p></p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#index","title":"Index","text":"<ul> <li><code>TidierPlots.geom_bar</code></li> <li><code>TidierPlots.geom_col</code></li> <li><code>TidierPlots.geom_density</code></li> <li><code>TidierPlots.geom_histogram</code></li> <li><code>TidierPlots.geom_point</code></li> <li><code>TidierPlots.geom_smooth</code></li> </ul>"},{"location":"reference/#reference-exported-functions","title":"Reference - Exported functions","text":"<p># <code>TidierPlots.geom_bar</code> \u2014 Function.</p> <pre><code>geom_bar(aes(...), ...)\ngeom_bar(plot::GGPlot, aes(...), ...)\n\nRepresent data as bars. \n\n# Arguments\n\n- plot::GGPlot (optional): a plot object to \"add\" this geom to\n- `aes(...)`: the names of the columns in the plot DataFrame that will be used to decide where the points are plotted.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n- y\n\n# Supported Optional Aesthetics\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n\n# Supported Options\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_col</code> \u2014 Function.</p> <pre><code>geom_col(aes(...), ...)\ngeom_col(plot::GGPlot, aes(...), ...)\n\nRepresent data as bars. \n\n# Arguments\n\n- plot::GGPlot (optional): a plot object to \"add\" this geom to\n- `aes(...)`: the names of the columns in the plot DataFrame that will be used to decide where the points are plotted.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n- y\n\n# Supported Optional Aesthetics\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n\n# Supported Options\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_density</code> \u2014 Function.</p> <pre><code>@geom_density(aes(...), ...)\n\nRepresent data as a smooth density curve. \n\n# Arguments\n\n- `aes(...)`: the names of the columns in the plot DataFrame and their corresponding aesthetic.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n\n# Supported Optional Aesthetics\n\n- alpha\n- stroke\n- colour/color\n\n# Supported Options\n\n- alpha\n- stroke\n- colour/color\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_histogram</code> \u2014 Function.</p> <pre><code>geom_histogram(aes(...), ...)\ngeom_histogram(plot::GGPlot, aes(...), ...)\n\nRepresent data as a histogram. \n\n# Arguments\n\n- plot::GGPlot (optional): a plot object to \"add\" this geom to\n- `aes(...)`: the names of the columns in the plot DataFrame that will be used to decide where the points are plotted.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n\n# Supported Optional Aesthetics\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n\n# Supported Options\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_point</code> \u2014 Function.</p> <pre><code>geom_point(aes(...), ...)\n\nRepresent data as points. \n\n# Arguments\n\n- `aes(...)`: the names of the columns in the plot DataFrame that will be used to decide where the points are plotted.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n- y\n\n# Supported Optional Aesthetics\n\n- size\n- alpha\n- stroke\n- shape\n- colour/color\n\n# Supported Options\n\n- size\n- alpha\n- stroke\n- shape\n- colour/color\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_smooth</code> \u2014 Method.</p> <pre><code>geom_smooth(aes(...), ...)\ngeom_smooth(plot::GGPlot, aes(...), ...)\n\nRepresent data as a smoothed or linear fit. \n\n# Arguments\n\n- `aes(...)`: the names of the columns in the plot DataFrame that will be used to decide where the points are plotted.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n- y\n\n# Supported Optional Aesthetics\n\n- alpha\n- colour/color\n\n# Supported Options\n\n- method: \"smooth\" (loess fit) or \"lm\" (linear fit)\n- alpha\n- colour/color\n</code></pre> <p>source</p> <p></p> <p></p>"},{"location":"reference/#reference-internal-functions","title":"Reference - Internal functions","text":""},{"location":"examples/generated/Contributors/HowTo/","title":"Contribute","text":""},{"location":"examples/generated/Contributors/HowTo/#contribute-to-documentation","title":"Contribute to Documentation","text":"<p>Contributing with examples can be done by first creating a new file example here</p> <p>Info</p> <ul> <li><code>your_new_file.jl</code> at <code>docs/examples/UserGuide/</code></li> </ul> <p>Once this is done you need to add a new entry here at the bottom and the appropriate level.</p> <p>Info</p> <p>Your new entry should look like:</p> <ul> <li><code>\"Your title example\" : \"examples/generated/UserGuide/your_new_file.md\"</code></li> </ul> <p></p> <p></p>"},{"location":"examples/generated/Contributors/HowTo/#build-docs-locally","title":"Build docs locally","text":"<p>If you want to take a look at the docs locally before doing a PR follow the next steps:</p> <p>build docs locally</p> <p>Install the following dependencies in your system via pip, i.e.</p> <ul> <li><code>pip install mkdocs pygments python-markdown-math</code></li> <li><code>pip install mkdocs-material pymdown-extensions mkdocstrings</code></li> <li><code>pip mknotebooks pytkdocs_tweaks mkdocs_include_exclude_files jinja2 mkdocs-video</code></li> </ul> <p>Then simply go to your <code>docs</code> env and activate it, i.e.</p> <p><code>docs&gt; julia</code></p> <p><code>julia&gt; ]</code></p> <p><code>(docs) pkg&gt; activate .</code></p> <p>Next, run the scripts:</p> <p>Info</p> <p>Generate files and build docs by running:</p> <ul> <li><code>genfiles.jl</code></li> <li><code>make.jl</code></li> </ul> <p>Now go to your <code>terminal</code> in the same path <code>docs&gt;</code> and run:</p> <p><code>mkdocs serve</code></p> <p>This should output <code>http://127.0.0.1:8000</code>, copy/paste this into your browser and you are all set.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/supported_functions/","title":"Supported Functions","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\nusing WGLMakie\n</code></pre>"},{"location":"examples/generated/UserGuide/supported_functions/#geom_bar-labs","title":"@geom_bar, @labs","text":"<pre><code>WGLMakie.activate!()\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\nggplot(data = penguins) +\n    geom_bar(@aes(x = species)) +\n    labs(x = \"Species\")\n</code></pre> <p>This page was generated using Literate.jl.</p>"}]}