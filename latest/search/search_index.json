{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-tidierplotsjl","title":"What is TidierPlots.jl?","text":"<p>TidierPlots.jl is a 100% Julia implementation of the R package ggplot in Julia. Powered by the AlgebraOfGraphics.jl, Makie.jl, and Julia\u2019s extensive meta-programming capabilities, TidierPlots.jl is an R user\u2019s love letter to data visualization in Julia.</p> <p><code>TidierPlots.jl</code> has three goals, which differentiate it from other plotting packages in Julia:</p> <ol> <li>Stick as closely to tidyverse syntax and behaviour as possible: Whereas other  meta-packages introduce Julia-centric idioms for working with  plots, this package\u2019s goal is to reimplement ggplot  in Julia. This means that <code>TidierPlots.jl</code> uses tidy expressions as opposed  to idiomatic Julia expressions. An example of a tidy expression is  <code>a = mean(b)</code>.</li> <li>Stay as compatible as possible with AlgebraOfGraphics.jl This package is meant  to be a thin wrapper around AoG's syntax to help introduce R users to plotting in   Julia. <code>Geom</code> objects declared in TidierPlots.jl can be easily converted to AoG <code>Layer</code>  objects using <code>Layer(Geom)</code>, and <code>GGPlot</code> objects can be converted to AoG <code>Layers</code> objects using <code>Layers(GGPlot)</code>.</li> <li> <p>To Extend ggplot using julia-specific features where appropriate as long as this does  not confict with the first two goals. The package aims to behave exactly like ggplot  unless told otherwise. Additional options and parameters that are not present in ggplot   may be added, but options that are present in R's ggplot should behave the way they do in R. </p> </li> </ol> <p>To support R-style programming, TidierPlots.jl is implemented using macros.</p> <p>TidierPlots.jl currently supports the top-level macro <code>@ggplot()</code>, plus:</p> <p>Geoms:</p> <ul> <li><code>@geom_point</code></li> <li><code>@geom_smooth</code></li> <li><code>@geom_errorbar</code></li> <li><code>@geom_path</code>, <code>@geom_line</code>, and <code>@geom_step</code></li> <li><code>@geom_bar</code>, <code>@geom_col</code>, and <code>@geom_histogram</code></li> <li><code>@geom_boxplot</code> and <code>@geom_violin</code></li> <li><code>@geom_contour</code> and <code>@geom_tile</code></li> <li><code>@geom_text</code> and <code>@geom_label</code></li> </ul> <p>Makie Themes (Note that these are not macros):</p> <ul> <li><code>theme_ggplot2()</code> (the default)</li> <li><code>theme_dark()</code></li> <li><code>theme_black()</code></li> <li><code>theme_white()</code></li> <li><code>theme_minimal()</code></li> </ul> <p>Additional Elements:</p> <ul> <li><code>@scale_[x|y]_[continuous|log[ |2|10]|logit|pseudolog10|sqrt|reverse]</code></li> <li><code>@labs</code></li> <li><code>@lims</code></li> </ul> <p></p> <p></p>"},{"location":"#what-functions-does-tidierplotsjl-support","title":"What functions does TidierPlots.jl support?","text":""},{"location":"#example","title":"Example","text":"<p>Let's make some plots using the Palmer Penguins data from <code>PalmerPenguins.jl</code>:</p> <pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\n\n@ggplot(data = penguins) + \n    @geom_bar(aes(x = species)) +\n    @labs(x = \"Species\")\n</code></pre> <p></p>"},{"location":"examples/generated/UserGuide/supported_functions/","title":"Supported functions","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\nusing WGLMakie\n</code></pre>"},{"location":"examples/generated/UserGuide/supported_functions/#geom_bar-labs","title":"@geom_bar, @labs","text":"<pre><code>WGLMakie.activate!()\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\nggplot(data = penguins) +\n    geom_bar(@aes(x = species)) +\n    labs(x = \"Species\")\n</code></pre> <p>This page was generated using Literate.jl.</p>"}]}