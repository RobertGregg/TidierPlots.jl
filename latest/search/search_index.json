{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-tidierplotsjl","title":"What is TidierPlots.jl?","text":"<p>TidierPlots.jl is a 100% Julia implementation of the R package ggplot in Julia. Powered by AlgebraOfGraphics.jl, Makie.jl, and Julia\u2019s extensive meta-programming capabilities, TidierPlots.jl is an R user\u2019s love letter to data visualization in Julia.</p> <p><code>TidierPlots.jl</code> has three goals, which differentiate it from other plotting packages in Julia:</p> <ol> <li>Stick as closely to tidyverse syntax and behaviour as possible: Whereas other  meta-packages introduce Julia-centric idioms for working with  plots, this package\u2019s goal is to reimplement ggplot  in Julia. This currently just means that <code>TidierPlots.jl</code> gives the option for specifying <code>aes</code> with the macro <code>@es</code> to allow unquoted column references, but the use of macros may need to expand as more features are added.</li> <li>Stay as compatible as possible with AlgebraOfGraphics.jl This package is meant  to be a thin wrapper around AoG's syntax to help introduce R users to plotting in   Julia. <code>Geom</code> objects declared in TidierPlots.jl can be easily converted to AoG <code>Layer</code>  objects using <code>Layer(Geom)</code>, and <code>GGPlot</code> objects can be converted to AoG <code>Layers</code> objects using <code>Layers(GGPlot)</code>.</li> <li>To Extend ggplot using julia-specific features where appropriate as long as this does  not confict with the first two goals. The package aims to behave exactly like ggplot  unless told otherwise. Additional options and parameters that are not present in ggplot   may be added, but options that are present in R's ggplot should behave the way they do in R.</li> </ol> <p></p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>For the \"stable\" version, access the Pkg interface by pressing <code>]</code> at the <code>julia&gt;</code> prompt, then type <code>add TidierPlots</code>. </p> <p>For the development version:</p> <pre><code>using Pkg\nPkg.add(url=\"https://github.com/TidierOrg/TidierPlots.jl\")\n</code></pre> <p></p> <p></p>"},{"location":"#what-functions-does-tidierplotsjl-support","title":"What functions does TidierPlots.jl support?","text":"<p>TidierPlots.jl currently supports the top-level function <code>ggplot()</code>, plus:</p> <p>Geoms:</p> <ul> <li><code>geom_point</code></li> <li><code>geom_smooth</code></li> <li><code>geom_errorbar</code></li> <li><code>geom_path</code>, <code>geom_line</code>, and <code>geom_step</code></li> <li><code>geom_bar</code>, <code>geom_col</code>, and <code>geom_histogram</code></li> <li><code>geom_boxplot</code> and <code>geom_violin</code></li> <li><code>geom_contour</code> and <code>geom_tile</code></li> <li><code>geom_density</code></li> <li><code>geom_text</code> and <code>geom_label</code></li> </ul> <p>Makie Themes:</p> <ul> <li><code>theme_ggplot2()</code> (the default)</li> <li><code>theme_dark()</code></li> <li><code>theme_black()</code></li> <li><code>theme_light()</code></li> <li><code>theme_minimal()</code></li> </ul> <p>Colour Scales:</p> <ul> <li><code>scale_colo[u]r_manual()</code> - give a list of hex <code>values</code> enclosed in <code>c()</code> to define a scale</li> <li><code>scale_colo[u]r_[discrete|continuous]()</code> - set <code>palette =</code> a Makie palette.</li> </ul> <p>Facetting:</p> <ul> <li><code>facet_wrap</code>: Specify <code>facets</code> variable.</li> <li><code>facet_grid</code>: Specify <code>rows</code> and/or <code>cols</code>.</li> </ul> <p>Additional Elements:</p> <ul> <li><code>scale_[x|y]_[continuous|log[ |2|10]|logit|pseudolog10|sqrt|reverse]</code></li> <li><code>labs</code></li> <li><code>lims</code></li> </ul> <p></p> <p></p>"},{"location":"#differences-from-ggplot2","title":"Differences from ggplot2","text":"<p>The goal of this package is to allow you to write code that is as similar to ggplot2 code as possible. The only difference in basic usage is in the <code>aes()</code> function. TidierPlots.jl accepts multiple forms for aes specification, none of which is exactly the same as ggplot2.</p> <ul> <li>Option 1: <code>@aes</code> macro, aes as in ggplot, e.g. <code>@aes(x = x, y = y)</code></li> <li>Option 2: <code>@es</code> macro, aes as in ggplot, e.g. <code>@es(x = x, y = y)</code></li> <li>Option 3: <code>aes</code> function, julia-style columns, e.g. <code>aes(x = :x, y = :y)</code></li> <li>Option 4: <code>aes</code> function, strings for columns, e.g. <code>aes(x = \"x\", y = \"y\")</code></li> </ul> <p>Specifying aes options positionally, e.g. <code>aes(\"x\", \"y\")</code> is not yet supported.</p> <p></p> <p></p>"},{"location":"#display-options","title":"Display Options","text":"<p>Use the function <code>TidierPlots_set(option::String, value::Bool)</code> to control display options. The following options are supported:</p> <ul> <li>\"plot_show\" (default true). Enables <code>ggplot</code>-like behaviour where plots are displayed when created.</li> <li>\"plot_log\" (default true). Prints a text summary of the properties of the ggplot</li> </ul> <p></p> <p></p>"},{"location":"#example","title":"Example","text":"<p>Let's make a plot using the Palmer Penguins data from <code>PalmerPenguins.jl</code>:</p> <pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\n\n@ggplot(data = penguins) + \n    @geom_bar(aes(x = species)) +\n    @labs(x = \"Species\")\n</code></pre> <p></p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#index","title":"Index","text":"<ul> <li><code>TidierPlots.geom_bar</code></li> <li><code>TidierPlots.geom_col</code></li> <li><code>TidierPlots.geom_density</code></li> <li><code>TidierPlots.geom_histogram</code></li> <li><code>TidierPlots.geom_point</code></li> <li><code>TidierPlots.geom_smooth</code></li> </ul>"},{"location":"reference/#reference-exported-functions","title":"Reference - Exported functions","text":"<p># <code>TidierPlots.geom_bar</code> \u2014 Function.</p> <pre><code>geom_bar(aes(...), ...)\ngeom_bar(plot::GGPlot, aes(...), ...)\n\nRepresent data as bars. \n\n# Arguments\n\n- plot::GGPlot (optional): a plot object to \"add\" this geom to\n- `aes(...)`: the names of the columns in the plot DataFrame that will be used to decide where the points are plotted.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n- y\n\n# Supported Optional Aesthetics\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n\n# Supported Options\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_col</code> \u2014 Function.</p> <pre><code>geom_col(aes(...), ...)\ngeom_col(plot::GGPlot, aes(...), ...)\n\nRepresent data as bars. \n\n# Arguments\n\n- plot::GGPlot (optional): a plot object to \"add\" this geom to\n- `aes(...)`: the names of the columns in the plot DataFrame that will be used to decide where the points are plotted.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n- y\n\n# Supported Optional Aesthetics\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n\n# Supported Options\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_density</code> \u2014 Function.</p> <pre><code>@geom_density(aes(...), ...)\n\nRepresent data as a smooth density curve. \n\n# Arguments\n\n- `aes(...)`: the names of the columns in the plot DataFrame and their corresponding aesthetic.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n\n# Supported Optional Aesthetics\n\n- alpha\n- stroke\n- colour/color\n\n# Supported Options\n\n- alpha\n- stroke\n- colour/color\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_histogram</code> \u2014 Function.</p> <pre><code>geom_histogram(aes(...), ...)\ngeom_histogram(plot::GGPlot, aes(...), ...)\n\nRepresent data as a histogram. \n\n# Arguments\n\n- plot::GGPlot (optional): a plot object to \"add\" this geom to\n- `aes(...)`: the names of the columns in the plot DataFrame that will be used to decide where the points are plotted.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n\n# Supported Optional Aesthetics\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n\n# Supported Options\n\n- alpha\n- colour/color\n- fill\n- group\n- linetype\n- linewidth\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_point</code> \u2014 Function.</p> <pre><code># Points\n\nThe point geom is used to create scatterplots. The scatterplot is most\nuseful for displaying the relationship between two continuous variables.\nIt can be used to compare one continuous and one categorical variable, or\ntwo categorical variables, but a variation like `geom_jitter()`,\n`geom_count()`, or `geom_bin_2d()` is usually more\nappropriate. A _bubblechart_ is a scatterplot with a third variable\nmapped to the size of points.\n\n## Usage\n\ngeom_point(\n    plot::GGPlot,\n    data::DataFrame,\n    mapping::Aesthetics,\n    ... \n)\n\n## Arguments\n\nAll arguments are optional. If `data` and `mapping` are not specified, they will inherit from the GGPlot.\n\n- `plot:` A GGPlot to modify \n- `data:` A DataFrame containing the data to be plotted.\n- `mapping:` the names of the columns in the plot DataFrame that will be used to decide where the points are plotted. Create with the `aes` function.\n- `...`: options that are not mapped to a column. Pass supported aesthetics here to fix them to a specific value. \n\n## Aesthetics (Required Aesthetics are in **bold**)\n\n- **x**\n- **y**\n- size\n- alpha\n- stroke\n- shape\n- colour/color\n\n## Examples\n\n```\nggplot(mtcars, @aes(x = WT, y = MPG)) + \n    geom_point()\n```\n![](src/assets/geom_point1.png)\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_smooth</code> \u2014 Method.</p> <pre><code>geom_smooth(aes(...), ...)\ngeom_smooth(plot::GGPlot, aes(...), ...)\n\nRepresent data as a smoothed or linear fit. \n\n# Arguments\n\n- `aes(...)`: the names of the columns in the plot DataFrame that will be used to decide where the points are plotted.\n- `...`: options that are not mapped to a column \n\n# Required Aesthetics\n\n- x\n- y\n\n# Supported Optional Aesthetics\n\n- alpha\n- colour/color\n\n# Supported Options\n\n- method: \"smooth\" (loess fit) or \"lm\" (linear fit)\n- alpha\n- colour/color\n</code></pre> <p>source</p> <p></p> <p></p>"},{"location":"reference/#reference-internal-functions","title":"Reference - Internal functions","text":""},{"location":"examples/generated/Contributors/HowTo/","title":"Contribute","text":""},{"location":"examples/generated/Contributors/HowTo/#contribute-to-documentation","title":"Contribute to Documentation","text":"<p>Contributing with examples can be done by first creating a new file example here</p> <p>Info</p> <ul> <li><code>your_new_file.jl</code> at <code>docs/examples/UserGuide/</code></li> </ul> <p>Once this is done you need to add a new entry here at the bottom and the appropriate level.</p> <p>Info</p> <p>Your new entry should look like:</p> <ul> <li><code>\"Your title example\" : \"examples/generated/UserGuide/your_new_file.md\"</code></li> </ul> <p></p> <p></p>"},{"location":"examples/generated/Contributors/HowTo/#build-docs-locally","title":"Build docs locally","text":"<p>If you want to take a look at the docs locally before doing a PR follow the next steps:</p> <p>build docs locally</p> <p>Install the following dependencies in your system via pip, i.e.</p> <ul> <li><code>pip install mkdocs pygments python-markdown-math</code></li> <li><code>pip install mkdocs-material pymdown-extensions mkdocstrings</code></li> <li><code>pip mknotebooks pytkdocs_tweaks mkdocs_include_exclude_files jinja2 mkdocs-video</code></li> </ul> <p>Then simply go to your <code>docs</code> env and activate it, i.e.</p> <p><code>docs&gt; julia</code></p> <p><code>julia&gt; ]</code></p> <p><code>(docs) pkg&gt; activate .</code></p> <p>Next, run the scripts:</p> <p>Info</p> <p>Generate files and build docs by running:</p> <ul> <li><code>genfiles.jl</code></li> <li><code>make.jl</code></li> </ul> <p>Now go to your <code>terminal</code> in the same path <code>docs&gt;</code> and run:</p> <p><code>mkdocs serve</code></p> <p>This should output <code>http://127.0.0.1:8000</code>, copy/paste this into your browser and you are all set.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/docs_bridge/","title":"Prelim How To","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\nusing CairoMakie\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\n</code></pre> 333\u00d77 DataFrame Rowspeciesislandbill_length_mmbill_depth_mmflipper_length_mmbody_mass_gsexString15String15Float64Float64Int64Int64String71AdelieTorgersen39.118.71813750male2AdelieTorgersen39.517.41863800female3AdelieTorgersen40.318.01953250female4AdelieTorgersen36.719.31933450female5AdelieTorgersen39.320.61903650male6AdelieTorgersen38.917.81813625female7AdelieTorgersen39.219.61954675male8AdelieTorgersen41.117.61823200female9AdelieTorgersen38.621.21913800male10AdelieTorgersen34.621.11984400male11AdelieTorgersen36.617.81853700female12AdelieTorgersen38.719.01953450female13AdelieTorgersen42.520.71974500male14AdelieTorgersen34.418.41843325female15AdelieTorgersen46.021.51944200male16AdelieBiscoe37.818.31743400female17AdelieBiscoe37.718.71803600male18AdelieBiscoe35.919.21893800female19AdelieBiscoe38.218.11853950male20AdelieBiscoe38.817.21803800male21AdelieBiscoe35.318.91873800female22AdelieBiscoe40.618.61833550male23AdelieBiscoe40.517.91873200female24AdelieBiscoe37.918.61723150female25AdelieBiscoe40.518.91803950male26AdelieDream39.516.71783250female27AdelieDream37.218.11783900male28AdelieDream39.517.81883300female29AdelieDream40.918.91843900male30AdelieDream36.417.01953325female31AdelieDream39.221.11964150male32AdelieDream38.820.01903950male33AdelieDream42.218.51803550female34AdelieDream37.619.31813300female35AdelieDream39.819.11844650male36AdelieDream36.518.01823150female37AdelieDream40.818.41953900male38AdelieDream36.018.51863100female39AdelieDream44.119.71964400male40AdelieDream37.016.91853000female41AdelieDream39.618.81904600male42AdelieDream41.119.01823425male43AdelieDream36.017.91903450female44AdelieDream42.321.21914150male45AdelieBiscoe39.617.71863500female46AdelieBiscoe40.118.91884300male47AdelieBiscoe35.017.91903450female48AdelieBiscoe42.019.52004050male49AdelieBiscoe34.518.11872900female50AdelieBiscoe41.418.61913700male51AdelieBiscoe39.017.51863550female52AdelieBiscoe40.618.81933800male53AdelieBiscoe36.516.61812850female54AdelieBiscoe37.619.11943750male55AdelieBiscoe35.716.91853150female56AdelieBiscoe41.321.11954400male57AdelieBiscoe37.617.01853600female58AdelieBiscoe41.118.21924050male59AdelieBiscoe36.417.11842850female60AdelieBiscoe41.618.01923950male61AdelieBiscoe35.516.21953350female62AdelieBiscoe41.119.11884100male63AdelieTorgersen35.916.61903050female64AdelieTorgersen41.819.41984450male65AdelieTorgersen33.519.01903600female66AdelieTorgersen39.718.41903900male67AdelieTorgersen39.617.21963550female68AdelieTorgersen45.818.91974150male69AdelieTorgersen35.517.51903700female70AdelieTorgersen42.818.51954250male71AdelieTorgersen40.916.81913700female72AdelieTorgersen37.219.41843900male73AdelieTorgersen36.216.11873550female74AdelieTorgersen42.119.11954000male75AdelieTorgersen34.617.21893200female76AdelieTorgersen42.917.61964700male77AdelieTorgersen36.718.81873800female78AdelieTorgersen35.119.41934200male79AdelieDream37.317.81913350female80AdelieDream41.320.31943550male81AdelieDream36.319.51903800male82AdelieDream36.918.61893500female83AdelieDream38.319.21893950male84AdelieDream38.918.81903600female85AdelieDream35.718.02023550female86AdelieDream41.118.12054300male87AdelieDream34.017.11853400female88AdelieDream39.618.11864450male89AdelieDream36.217.31873300female90AdelieDream40.818.92084300male91AdelieDream38.118.61903700female92AdelieDream40.318.51964350male93AdelieDream33.116.11782900female94AdelieDream43.218.51924100male95AdelieBiscoe35.017.91923725female96AdelieBiscoe41.020.02034725male97AdelieBiscoe37.716.01833075female98AdelieBiscoe37.820.01904250male99AdelieBiscoe37.918.61932925female100AdelieBiscoe39.718.91843550male101AdelieBiscoe38.617.21993750female102AdelieBiscoe38.220.01903900male103AdelieBiscoe38.117.01813175female104AdelieBiscoe43.219.01974775male105AdelieBiscoe38.116.51983825female106AdelieBiscoe45.620.31914600male107AdelieBiscoe39.717.71933200female108AdelieBiscoe42.219.51974275male109AdelieBiscoe39.620.71913900female110AdelieBiscoe42.718.31964075male111AdelieTorgersen38.617.01882900female112AdelieTorgersen37.320.51993775male113AdelieTorgersen35.717.01893350female114AdelieTorgersen41.118.61893325male115AdelieTorgersen36.217.21873150female116AdelieTorgersen37.719.81983500male117AdelieTorgersen40.217.01763450female118AdelieTorgersen41.418.52023875male119AdelieTorgersen35.215.91863050female120AdelieTorgersen40.619.01994000male121AdelieTorgersen38.817.61913275female122AdelieTorgersen41.518.31954300male123AdelieTorgersen39.017.11913050female124AdelieTorgersen44.118.02104000male125AdelieTorgersen38.517.91903325female126AdelieTorgersen43.119.21973500male127AdelieDream36.818.51933500female128AdelieDream37.518.51994475male129AdelieDream38.117.61873425female130AdelieDream41.117.51903900male131AdelieDream35.617.51913175female132AdelieDream40.220.12003975male133AdelieDream37.016.51853400female134AdelieDream39.717.91934250male135AdelieDream40.217.11933400female136AdelieDream40.617.21873475male137AdelieDream32.115.51883050female138AdelieDream40.717.01903725male139AdelieDream37.316.81923000female140AdelieDream39.018.71853650male141AdelieDream39.218.61904250male142AdelieDream36.618.41843475female143AdelieDream36.017.81953450female144AdelieDream37.818.11933750male145AdelieDream36.017.11873700female146AdelieDream41.518.52014000male147GentooBiscoe46.113.22114500female148GentooBiscoe50.016.32305700male149GentooBiscoe48.714.12104450female150GentooBiscoe50.015.22185700male151GentooBiscoe47.614.52155400male152GentooBiscoe46.513.52104550female153GentooBiscoe45.414.62114800female154GentooBiscoe46.715.32195200male155GentooBiscoe43.313.42094400female156GentooBiscoe46.815.42155150male157GentooBiscoe40.913.72144650female158GentooBiscoe49.016.12165550male159GentooBiscoe45.513.72144650female160GentooBiscoe48.414.62135850male161GentooBiscoe45.814.62104200female162GentooBiscoe49.315.72175850male163GentooBiscoe42.013.52104150female164GentooBiscoe49.215.22216300male165GentooBiscoe46.214.52094800female166GentooBiscoe48.715.12225350male167GentooBiscoe50.214.32185700male168GentooBiscoe45.114.52155000female169GentooBiscoe46.514.52134400female170GentooBiscoe46.315.82155050male171GentooBiscoe42.913.12155000female172GentooBiscoe46.115.12155100male173GentooBiscoe47.815.02155650male174GentooBiscoe48.214.32104600female175GentooBiscoe50.015.32205550male176GentooBiscoe47.315.32225250male177GentooBiscoe42.814.22094700female178GentooBiscoe45.114.52075050female179GentooBiscoe59.617.02306050male180GentooBiscoe49.114.82205150female181GentooBiscoe48.416.32205400male182GentooBiscoe42.613.72134950female183GentooBiscoe44.417.32195250male184GentooBiscoe44.013.62084350female185GentooBiscoe48.715.72085350male186GentooBiscoe42.713.72083950female187GentooBiscoe49.616.02255700male188GentooBiscoe45.313.72104300female189GentooBiscoe49.615.02164750male190GentooBiscoe50.515.92225550male191GentooBiscoe43.613.92174900female192GentooBiscoe45.513.92104200female193GentooBiscoe50.515.92255400male194GentooBiscoe44.913.32135100female195GentooBiscoe45.215.82155300male196GentooBiscoe46.614.22104850female197GentooBiscoe48.514.12205300male198GentooBiscoe45.114.42104400female199GentooBiscoe50.115.02255000male200GentooBiscoe46.514.42174900female201GentooBiscoe45.015.42205050male202GentooBiscoe43.813.92084300female203GentooBiscoe45.515.02205000male204GentooBiscoe43.214.52084450female205GentooBiscoe50.415.32245550male206GentooBiscoe45.313.82084200female207GentooBiscoe46.214.92215300male208GentooBiscoe45.713.92144400female209GentooBiscoe54.315.72315650male210GentooBiscoe45.814.22194700female211GentooBiscoe49.816.82305700male212GentooBiscoe49.516.22295800male213GentooBiscoe43.514.22204700female214GentooBiscoe50.715.02235550male215GentooBiscoe47.715.02164750female216GentooBiscoe46.415.62215000male217GentooBiscoe48.215.62215100male218GentooBiscoe46.514.82175200female219GentooBiscoe46.415.02164700female220GentooBiscoe48.616.02305800male221GentooBiscoe47.514.22094600female222GentooBiscoe51.116.32206000male223GentooBiscoe45.213.82154750female224GentooBiscoe45.216.42235950male225GentooBiscoe49.114.52124625female226GentooBiscoe52.515.62215450male227GentooBiscoe47.414.62124725female228GentooBiscoe50.015.92245350male229GentooBiscoe44.913.82124750female230GentooBiscoe50.817.32285600male231GentooBiscoe43.414.42184600female232GentooBiscoe51.314.22185300male233GentooBiscoe47.514.02124875female234GentooBiscoe52.117.02305550male235GentooBiscoe47.515.02184950female236GentooBiscoe52.217.12285400male237GentooBiscoe45.514.52124750female238GentooBiscoe49.516.12245650male239GentooBiscoe44.514.72144850female240GentooBiscoe50.815.72265200male241GentooBiscoe49.415.82164925male242GentooBiscoe46.914.62224875female243GentooBiscoe48.414.42034625female244GentooBiscoe51.116.52255250male245GentooBiscoe48.515.02194850female246GentooBiscoe55.917.02285600male247GentooBiscoe47.215.52154975female248GentooBiscoe49.115.02285500male249GentooBiscoe46.816.12155500male250GentooBiscoe41.714.72104700female251GentooBiscoe53.415.82195500male252GentooBiscoe43.314.02084575female253GentooBiscoe48.115.12095500male254GentooBiscoe50.515.22165000female255GentooBiscoe49.815.92295950male256GentooBiscoe43.515.22134650female257GentooBiscoe51.516.32305500male258GentooBiscoe46.214.12174375female259GentooBiscoe55.116.02305850male260GentooBiscoe48.816.22226000male261GentooBiscoe47.213.72144925female262GentooBiscoe46.814.32154850female263GentooBiscoe50.415.72225750male264GentooBiscoe45.214.82125200female265GentooBiscoe49.916.12135400male266ChinstrapDream46.517.91923500female267ChinstrapDream50.019.51963900male268ChinstrapDream51.319.21933650male269ChinstrapDream45.418.71883525female270ChinstrapDream52.719.81973725male271ChinstrapDream45.217.81983950female272ChinstrapDream46.118.21783250female273ChinstrapDream51.318.21973750male274ChinstrapDream46.018.91954150female275ChinstrapDream51.319.91983700male276ChinstrapDream46.617.81933800female277ChinstrapDream51.720.31943775male278ChinstrapDream47.017.31853700female279ChinstrapDream52.018.12014050male280ChinstrapDream45.917.11903575female281ChinstrapDream50.519.62014050male282ChinstrapDream50.320.01973300male283ChinstrapDream58.017.81813700female284ChinstrapDream46.418.61903450female285ChinstrapDream49.218.21954400male286ChinstrapDream42.417.31813600female287ChinstrapDream48.517.51913400male288ChinstrapDream43.216.61872900female289ChinstrapDream50.619.41933800male290ChinstrapDream46.717.91953300female291ChinstrapDream52.019.01974150male292ChinstrapDream50.518.42003400female293ChinstrapDream49.519.02003800male294ChinstrapDream46.417.81913700female295ChinstrapDream52.820.02054550male296ChinstrapDream40.916.61873200female297ChinstrapDream54.220.82014300male298ChinstrapDream42.516.71873350female299ChinstrapDream51.018.82034100male300ChinstrapDream49.718.61953600male301ChinstrapDream47.516.81993900female302ChinstrapDream47.618.31953850female303ChinstrapDream52.020.72104800male304ChinstrapDream46.916.61922700female305ChinstrapDream53.519.92054500male306ChinstrapDream49.019.52103950male307ChinstrapDream46.217.51873650female308ChinstrapDream50.919.11963550male309ChinstrapDream45.517.01963500female310ChinstrapDream50.917.91963675female311ChinstrapDream50.818.52014450male312ChinstrapDream50.117.91903400female313ChinstrapDream49.019.62124300male314ChinstrapDream51.518.71873250male315ChinstrapDream49.817.31983675female316ChinstrapDream48.116.41993325female317ChinstrapDream51.419.02013950male318ChinstrapDream45.717.31933600female319ChinstrapDream50.719.72034050male320ChinstrapDream42.517.31873350female321ChinstrapDream52.218.81973450male322ChinstrapDream45.216.61913250female323ChinstrapDream49.319.92034050male324ChinstrapDream50.218.82023800male325ChinstrapDream45.619.41943525female326ChinstrapDream51.919.52063950male327ChinstrapDream46.816.51893650female328ChinstrapDream45.717.01953650female329ChinstrapDream55.819.82074000male330ChinstrapDream43.518.12023400female331ChinstrapDream49.618.21933775male332ChinstrapDream50.819.02104100male333ChinstrapDream50.218.71983775female"},{"location":"examples/generated/UserGuide/docs_bridge/#ggplot","title":"<code>ggplot()</code>","text":"<p><code>ggplot()</code> is the starting point of any plot. It sets up the initial plot with default settings that can be later customized with geoms, scales, theme settings and other specifications. <code>ggplot</code> usually used with a data source as an argument, and optionally, a set of aesthetics specified by @aes(). The data source is typically a DataFrame.</p> <pre><code>#If a set of aesthetics is specified in the initial ggplot call, these aesthetics apply to all layers added to the plot, unless they are overridden in subsequent layers.\n\nggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm, color = species))+\n    geom_point()+\n    geom_smooth()\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#aes","title":"<code>@aes()</code>","text":"<p><code>aes()</code> is used to map variables in your data to visual properties (aesthetics) of the plot. These aesthetics can include things like position (x and y coordinates), color, shape, size, etc. Each aesthetic is a way of visualizing a variable or a statistical transformation of a variable. Aesthetics are specified in the form aes(aesthetic = variable), where aesthetic is the name of the aesthetic, and variable is the column name in your data that you want to map to the aesthetic. The variable names do not need to be preceded by a colon.</p> <p>Of note, TidierPlots.jl accepts multiple forms for aes specification, none of which is exactly the same as ggplot2.</p> <ul> <li>Option 1: <code>@aes</code> macro, aes as in ggplot, e.g. <code>@aes(x = x, y = y)</code></li> <li>Option 2: <code>@es</code> macro, aes as in ggplot, e.g. <code>@es(x = x, y = y)</code></li> <li>Option 3: <code>aes</code> function, julia-style columns, e.g. <code>aes(x = :x, y = :y)</code></li> <li>Option 4: <code>aes</code> function, strings for columns, e.g. <code>aes(x = \"x\", y = \"y\")</code></li> </ul> <p>The examples below will generally use option 1</p> <p>In the above example, we can see that the x, y, and color aesthetics are being mapped to each subsequent layer of the plot.</p> <p>In general, <code>aes()</code> can be used within the <code>ggplot</code>  to set global aesthetics that apply to all layers, or within individual geoms to set aesthetics that apply only to that layer.</p> <p>Moving from general rules, to specific plots, let us first explore <code>geom_point()</code></p> <p><code>geom_point()</code> <code>geom_point</code> is used to create a scatter plot. It is typically used with aesthetics mapping variables to x and y positions, and optionally to other aesthetics like color, shape, and size. <code>geom_point</code> can be used to visualize the relationship between two continuous variables, or a continuous and a discrete variable. The following visuals features can be changed within @geom_point(), shape, size, stroke, strokecolour, and alpha .</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n    geom_point(\n                size = 20,\n                stroke = 1,\n                strokecolor = \"black\",\n                alpha = 0.2) +\n    labs(x = \"Bill Length (mm)\", y = \"Bill Width (mm)\") +\n    lims(x = c(40, 60), y = c(15, 20)) +\n    theme_minimal()\n</code></pre> <p></p> <p>In the example above, a scatter plot is created with the variable billlengthmm mapped to the x position, and billdepthmm mapped to the y position with color mapped to species. Supported optional arguements include:</p> <ul> <li>size - this is the size of the marker</li> <li>alpha (or transparency), is set to a value between 0 and 1.</li> <li>strokecolor is the stroke color around the marker. https://juliagraphics.github.io/Colors.jl/stable/namedcolors/ colors can be chosen from any name on this list</li> <li>stroke this is the thickeness of the stroke around the marker</li> </ul> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#lims","title":"<code>lims</code>","text":"<p><code>lims</code> allows the user to set the ranges for the x and y axises as shown in the example above.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#geom_smooth","title":"<code>geom_smooth()</code>","text":"<p>The <code>geom_smooth()</code> is used to add a smoothed line (or curve) fitted to the data. It is typically used with aesthetics mapping variables to x and y positions. <code>geom_smooth()</code> can be used to visualize trends in the data. Using the example above, lets add a smoothed line to each species. <code>geom_smooth</code> currently supports only \"lm\" powered by <code>AlgebraOfGraphics.linear()</code>. This example also illsutrates how to use the scale <code>scale_x_log10()</code> and <code>scale_y_reverse()</code> to improve readiblity of your graph.</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    scale_x_log10(name = \"Log10 Scaled Bill Length\") +\n    scale_y_reverse(name = \"Reversed Bill Width\")+\n    theme_minimal()\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#geom_path-and-geom_line","title":"<code>geom_path()</code> and <code>geom_line()</code>","text":"<p><code>geom_path()</code> and <code>geom_line()</code>  are used to create line plots. They are typically used with aesthetics mapping variables to x and y positions. While <code>geom_path()</code> connects the points in the order they appear in the data, <code>geom_line()</code> connects the points in order of the x values. These can be used to visualize trends or relationships between two continuous variables.</p> <p><code>##geom_bar</code>, <code>geom_col</code>, and <code>geom_histogram</code> <code>geom_bar</code>  is used to create bar plots for categorical data.  <code>geom_col</code>  is a special case of <code>geom_bar</code> where the height of the bars is already computed and does not need to be counted. <code>geom_histogram</code>  is used to create a histogram, which is essentially a bar plot for continuous data, where the data is divided into bins and the number of data points in each bin is counted.</p> <pre><code>using TidierData: @chain, @count\na = @chain penguins begin\n    @count(species)\nend\n\nggplot(data=penguins, @aes(x=species)) +\n  geom_bar(aes(color = \"island\"), position = \"dodge\")\n</code></pre> <p></p> <p>geom_bar optional arguments include</p> <ul> <li>color, alpha as above</li> <li>position, when set to \"dodge,\" bar charts will not stack</li> </ul> <pre><code>ggplot(data=penguins, @aes(x = island, y=species)) + geom_col()\nggplot() +\n  geom_histogram(data=penguins, @aes(x=bill_length_mm, color = species))\n</code></pre> <p></p> <p>optional arguments inlcude</p> <p>In the first example, a bar plot is created with the variable CategoricalVar mapped to the x position, and the count of each category is represented by the height of the bars.</p> <p>In the second example, a column plot is created with the variable CategoricalVar mapped to the x position, and ComputedHeight mapped to the y position.</p> <p>A histogram is created with the continuous variable, billlengthmm, mapped to the x position, and the data is divided into bins, with the count in each bin represented by the height of the bars.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#geom_path-and-geom_line_1","title":"<code>geom_path</code> and <code>geom_line</code>","text":"<p>The <code>geom_path</code> and <code>geom_line</code>  are used to create line plots. <code>geom_path</code> connects the data points in the order they appear in the data, while <code>geom_line</code> connects the data points in order of the x-values.</p> <pre><code>ggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm, color=species)) +\n    geom_path()\n</code></pre> <p></p> <p>In this example, a path plot is created where the bill length of penguins is mapped to the x position, the bill depth is mapped to the y position, and different species are represented by different colors. Please note, geom_path is used here as an example, but this is not a correct plot type given the data at hand.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#geom_step","title":"<code>geom_step</code>","text":"<p>The <code>geom_step</code> macro creates a step plot, which is similar to a line plot but with a step pattern rather than a direct line from point to point.</p> <pre><code>ggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm, color=species)) +\n  geom_step()\n</code></pre> <p></p> <p>In this example, a step plot is created where the bill length of penguins is mapped to the x position, the bill depth is mapped to the y position, and different species are represented by different colors.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#geom_boxplot","title":"<code>geom_boxplot</code>","text":"<p><code>geom_boxplot</code> creates a boxplot.</p> <pre><code>ggplot()+\n  geom_boxplot(data=penguins, @aes(x = island, y = bill_length_mm, color = species),  alpha = .3)\n</code></pre> <p></p> <p>In this example, a boxplot is created where different island of penguins are mapped to the x position, and the bill length is mapped to the y position. Finally, the each species will be mapped to a different color</p> <p>geom_boxplot supported optinal arguements currently include:</p> <ul> <li>color - if used within the aes() with a categorical variable it will make each category a different color as shown above. When used outside of the aes() and selected with a color, it will make each boxplot that color.</li> <li>alpha - transaparency as above, used outside of the aes()</li> </ul> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#geom_violin","title":"<code>geom_violin</code>","text":"<p><code>geom_violin</code>  creates a violin plot, which is a combination of a boxplot and a kernel density plot.</p> <pre><code>  ggplot(penguins, @aes(x=species, y=bill_depth_mm, color = species)) +\n    geom_violin()\n</code></pre> <p></p> <p>In this example, a violin plot is created where different species of penguins are mapped to the x position, and the bill depth is mapped to the y position. geom_violin does not currently support mapping a categorical variable to colors.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#geom_contour","title":"<code>geom_contour</code>","text":"<p>The <code>geom_contour</code>  creates a contour plot.</p> <pre><code>ggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm, z=body_mass_g)) +\n  geom_contour()\n</code></pre> <p></p> <p>In this example, a contour plot is created where the bill length of penguins is mapped to the x position, the bill depth is mapped to the y position, and the body mass is mapped to the contour lines.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#geom_tile","title":"<code>geom_tile</code>","text":"<p>The <code>geom_tile</code> creates a tile plot, also known as a heatmap.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#geom_text-and-geom_label","title":"<code>geom_text</code> and <code>geom_label</code>","text":"<p><code>geom_text</code> and <code>geom_label</code>  are used to add text and labels to a plot.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#scale_x_log10-scale_y_log10","title":"<code>scale_x_log10</code>,  <code>scale_y_log10</code>","text":"<p><code>scale_x_log10</code> and <code>scale_y_log10</code> apply a base 10 logarithmic transformation to the x and y axes, respectively.</p> <pre><code>ggplot(penguins, @aes(x=body_mass_g, y=bill_length_mm)) +\n  geom_point() +\n  scale_x_log10()\n</code></pre> <p></p> <p>In this example, a scatter plot is created where the body mass of penguins is mapped to the x position and the bill length to the y position. A base 10 logarithmic transformation is then applied to the x-axis.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#scale_x_log2-scale_y_log2-scale_x_log-scale_y_log","title":"<code>scale_x_log2</code>, <code>scale_y_log2</code>, <code>scale_x_log</code>, <code>scale_y_log</code>","text":"<p>These work similarly to the previous ones, but apply a base 2 or base e logarithmic transformation to the x and y axes, respectively.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#scale_x_logit-scale_y_logit","title":"<code>scale_x_logit</code>, <code>scale_y_logit</code>","text":"<p><code>scale_x_logit</code> and `scaleylogit apply a logit transformation to the x and y axes, respectively. This transformation is often used when visualizing proportions or probabilities.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#scale_x_pseudolog10-scale_y_pseudolog10-scale_x_symlog10-scale_y_symlog10","title":"<code>scale_x_pseudolog10</code>, <code>scale_y_pseudolog10</code>, <code>scale_x_Symlog10</code>, <code>scale_y_Symlog10</code>","text":"<p>These apply different types of logarithmic transformations to the x and y axes. The \"pseudo\" and \"Symlog\" transformations are designed to handle zeros and negative values more effectively.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#scale_x_reverse-scale_y_reverse","title":"<code>scale_x_reverse</code>, <code>scale_y_reverse</code>","text":"<p><code>scale_x_reverse</code> and <code>scale_y_reverse</code>  reverse the direction of the x and y axes, respectively.</p> <pre><code>ggplot(penguins, @aes(x=body_mass_g, y=bill_length_mm, color = species)) +\n   geom_point() +\n   scale_y_reverse() +\n   theme_minimal()\n</code></pre> <p></p> <p>In this example, a scatter plot is created where the body mass of penguins is mapped to the x position and the bill length to the y position. The direction of the y-axis is then reversed.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#scale_x_sqrt-scale_y_sqrt","title":"<code>scale_x_sqrt</code>, <code>scale_y_sqrt</code>","text":"<p><code>scale_x_sqrt</code> and <code>scale_y_sqrt</code>  apply a square root transformation to the x and y axes, respectively.</p> <pre><code>ggplot(penguins, @aes(x=body_mass_g, y=bill_length_mm, color = species)) +\n   geom_point() +\n   scale_x_sqrt() +\n   theme_minimal()\n</code></pre> <p></p> <p>In this example, a scatter plot is created where the body mass of penguins is mapped to the x position and the bill length to the y position. A square root transformation is then applied to the x-axis</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#geom_errorbar-and-geom_errorbar","title":"<code>geom_errorbar</code> and <code>geom_errorbar</code>","text":"<p>The geomerrorbar and geomerrorbarh create vertical and horizontal error bars respectively.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#facet_wrap-and-facet_grid","title":"<code>facet_wrap</code> and <code>facet_grid</code>","text":"<p><code>facet_wrap</code> arranges a sequence of plots into a grid, wrapping them based on one or more grouping variables.</p> <pre><code>ggplot(penguins, height = 200, width = 200)+\n  geom_point(@es(x = bill_length_mm, y = bill_depth_mm, colour = species))+\n  facet_wrap(facets = :species)\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/docs_bridge/#ggsave","title":"<code>ggsave</code>","text":"<p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/supported_functions/","title":"Supported Functions","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\nusing CairoMakie\n</code></pre>"},{"location":"examples/generated/UserGuide/supported_functions/#geom_bar-labs","title":"@geom_bar, @labs","text":"<pre><code>penguins = dropmissing(DataFrame(PalmerPenguins.load()))\nggplot(data = penguins) +\n    geom_bar(@aes(x = species)) +\n    labs(x = \"Species\")\n</code></pre> <p>This page was generated using Literate.jl.</p>"}]}